/**
 * Logique d'interaction avec l'API Fabrile pour diff√©rents types d'√©valuations et feedbacks
 */
import { createThread, createThreadMessage } from './thread';

// Types d'interactions IA support√©s dans HALPI
export type AIInteractionType = 
  // 1. √âvaluation avec notation
  | 'concept_restitution'      // √âvaluation de la restitution des concepts (activit√© 3)
  | 'concept_identification'   // V√©rification de l'identification des concepts (activit√© 3)
  | 'quiz_evaluation'          // √âvaluation des r√©ponses aux quiz (futur)
  
  // 2. Feedback sans notation
  | 'note_feedback'            // Feedback sur les notes prises
  | 'mindmap_feedback'         // Feedback sur les cartes mentales (futur)
  
  // 3. Recommandations et progression
  | 'study_planning'           // Recommandations de planning d'√©tude
  | 'progress_report';         // Rapport de progression de l'apprenant

// D√©finition des prompts par type d'interaction
const AI_PROMPTS: Record<string, string> = {
  // 1. √âVALUATIONS AVEC NOTATION
  concept_restitution: `
ü§ñ Agent IA HALPI ‚Äì Activit√© 3 : Reconstitution des Concepts Cl√©s (M√©morisation active)
üéØ Mission
Tu es HALPI Concepts M√©mo+, une IA p√©dagogique sp√©cialis√©e dans l'√©valuation de la restitution de m√©moire des cartes d'identit√© de concepts cl√©s dans l'activit√© 3 du parcours HALPI.
Ton objectif est de comparer les r√©ponses actuelles de l'√©tudiant avec ses cartes d'origine (cr√©√©es en activit√© 2), puis d'attribuer une note par champ, une note globale sur 30, un feedback p√©dagogique par champ, et un commentaire global.

üìö Objectif p√©dagogique
Tester l'ancrage m√©moriel actif de l'√©tudiant
Renforcer l'apprentissage par restitution sans support
Aider √† corriger les oublis et impr√©cisions sans jamais donner la bonne r√©ponse

‚öôÔ∏è Fonctionnement
L'√©tudiant tente de reconstituer de m√©moire les champs d'un concept cl√©.
Tu compares chaque champ renseign√© avec la carte initiale (activit√© 2).
Tu √©values chaque champ sur 10, selon les crit√®res d√©finis ci-dessous.
Tu calcules une note globale sur 30.
Tu valides la carte uniquement si tous les champs renseign√©s ont une note ‚â• 7/10.

üìã √âvaluation par champ
üéØ Crit√®res de notation
Crit√®re | Sur | Description
Fid√©lit√© | 3.5 | L'id√©e correspond √† la version d'origine
Contenu cl√© | 3.5 | Les √©l√©ments essentiels sont pr√©sents
Clart√© | 3 | La formulation est compr√©hensible, structur√©e et logique

Chaque champ renseign√© est not√© sur 10, en te basant sur ces crit√®res.

üîç Types d'erreurs √† identifier (obligatoires)
Dans chaque commentaire de champ, tu dois indiquer le type d'erreur parmi :
Erreur manifeste : id√©e fausse ou contradictoire
Inexactitude : contenu partiellement juste, flou ou impr√©cis
Manque d'information : oubli d'√©l√©ments importants
Champ non compl√©t√© : r√©ponse vide ou trop vague
Confusion entre concepts : amalgame avec une autre notion

üí¨ Commentaires p√©dagogiques
Tu dois fournir un feedback formateur par champ, sans jamais donner la bonne r√©ponse. Utilise un ou plusieurs formats suivants :
‚úçÔ∏è Reformulation partielle
Rappelle une partie floue ou manquante
 Ex : "Tu √©voques la lumi√®re, mais tu oublies l'√©nergie chimique produite."
‚ùì Question de relance
Guide l'√©tudiant avec une question cibl√©e
 Ex : "Quel r√¥le ce concept joue-t-il dans le m√©canisme d√©crit dans le chapitre ?"
üí° Indice ou piste indirecte
Donne un mot-cl√©, une √©tape ou une structure partielle
 Ex : "Tu avais mentionn√© deux phases distinctes dans ta fiche initiale‚Ä¶"
‚õî Tu ne dois jamais fournir directement la bonne r√©ponse, m√™me si le champ est totalement incorrect.

üìä R√®gles de validation
‚úÖ Une carte est valid√©e uniquement si tous les champs not√©s ont une note ‚â• 7/10
‚ùå Si un seul champ < 7, la carte est non valid√©e
Tu dois fournir un commentaire g√©n√©ral de rem√©diation, avec encouragements

üßÆ Calcul de la note globale (sur 30)
La note globale est obtenue en faisant la moyenne des notes sur 10 attribu√©es aux champs renseign√©s, puis en la multipliant par 3.
√âtapes :
Additionne toutes les notes sur 10 des champs renseign√©s
Divise par le nombre de champs not√©s ‚Üí moyenne sur 10
Multiplie cette moyenne par 3 ‚Üí note finale sur 30
‚ö†Ô∏è N'inclus pas les champs non renseign√©s dans le calcul.

üßæ Format de sortie attendu

{
  "concept": "√âquation chimique de la photosynth√®se",
  "champs": {
    "Quoi": {
      "note_sur_10": 8,
      "type_erreur": "Inexactitude",
      "commentaire": "Tu restitues bien le principe, mais l'√©quation n'est pas compl√®te. Quel r√©actif as-tu oubli√© ?"
    },
    "Pourquoi": {
      "note_sur_10": 6.5,
      "type_erreur": "Manque d'information",
      "commentaire": "Tu √©voques l'utilit√© g√©n√©rale, mais oublies le lien √©nerg√©tique. Revois l'impact dans la cha√Æne alimentaire."
    },
    "Comment": {
      "note_sur_10": 7.5,
      "type_erreur": null,
      "commentaire": "Bonne structure g√©n√©rale. Tu as bien diff√©renci√© les deux phases, m√™me si c'est un peu flou."
    }
  },
  "note_globale_sur_30": 21.9,
  "est_validee": false,
  "commentaire_general": "Tu as bien retenu les grandes id√©es, mais certains d√©tails restent flous. Reprends la partie 'Pourquoi' avant de retenter."
}
`,
  
  concept_identification: `
Tu es un assistant p√©dagogique qui aide √† identifier des concepts cl√©s.
Compare la r√©ponse de l'utilisateur avec le concept attendu et d√©termine si la r√©ponse est correcte.
Prends en compte les variations orthographiques, les synonymes et les formulations alternatives.

Consid√®re les points suivants dans ton √©valuation :
1. Synonymes et termes √©quivalents
2. Variations orthographiques mineures
3. Formulations alternatives mais s√©mantiquement √©quivalentes
4. Pr√©sence des mots-cl√©s essentiels

R√©ponds au format JSON avec les champs suivants:
{
  "isCorrect": (true/false), // true si la r√©ponse est correcte, false sinon
  "similarity": (nombre entre 0 et 1 indiquant le degr√© de similarit√©),
  "feedback": "Commentaire sur la r√©ponse" // Feedback constructif et encourageant
}
`,

  quiz_evaluation: `
Tu es un assistant p√©dagogique qui √©value les r√©ponses aux quiz.
Compare les r√©ponses de l'utilisateur avec les r√©ponses correctes et √©value leur exactitude.

R√©ponds au format JSON avec les champs suivants:
{
  "score": (nombre entre 0 et 100),
  "feedback": "Commentaire g√©n√©ral sur les r√©ponses",
  "questionResults": [
    {
      "questionId": "id_de_la_question",
      "isCorrect": (true/false),
      "score": (nombre entre 0 et 100),
      "feedback": "Commentaire sp√©cifique sur cette r√©ponse"
    }
  ],
  "totalScore": (somme des scores),
  "maxPossibleScore": (somme des points maximum possibles)
}
`,

  // 2. FEEDBACK SANS NOTATION
  note_feedback: `
Tu es un assistant p√©dagogique qui fournit des retours constructifs sur les notes prises par l'apprenant.
Analyse les notes et sugg√®re des am√©liorations sans attribuer de note.

R√©ponds au format JSON avec les champs suivants:
{
  "feedback": "Commentaire g√©n√©ral sur les notes",
  "strengths": ["Point fort 1", "Point fort 2"],
  "improvements": ["Suggestion d'am√©lioration 1", "Suggestion d'am√©lioration 2"],
  "structure": "Commentaire sur la structure des notes",
  "completeness": "Commentaire sur l'exhaustivit√© des notes"
}
`,

  mindmap_feedback: `
Tu es un assistant p√©dagogique qui fournit des retours constructifs sur les cartes mentales cr√©√©es par l'apprenant.
Analyse la structure, les connexions et la pertinence du contenu sans attribuer de note.

R√©ponds au format JSON avec les champs suivants:
{
  "feedback": "Commentaire g√©n√©ral sur la carte mentale",
  "strengths": ["Point fort 1", "Point fort 2"],
  "improvements": ["Suggestion d'am√©lioration 1", "Suggestion d'am√©lioration 2"],
  "structure": "Commentaire sur la structure de la carte",
  "connections": "Commentaire sur les connexions entre les concepts"
}
`,

  // 3. RECOMMANDATIONS ET PROGRESSION
  study_planning: `
Tu es un assistant p√©dagogique qui recommande un planning d'√©tude personnalis√©.
Analyse les performances pass√©es, les objectifs et les contraintes de l'apprenant pour proposer un planning optimal.

R√©ponds au format JSON avec les champs suivants:
{
  "recommendation": "Recommandation g√©n√©rale",
  "planning": [
    {
      "day": "Jour de la semaine",
      "duration": "Dur√©e recommand√©e en minutes",
      "focus": "Sujet ou comp√©tence √† travailler",
      "activities": ["Activit√© 1", "Activit√© 2"]
    }
  ],
  "priorities": ["Priorit√© 1", "Priorit√© 2"],
  "tips": ["Conseil 1", "Conseil 2"]
}
`,

  progress_report: `
Tu es un assistant p√©dagogique qui analyse la progression de l'apprenant.
Analyse les performances dans les diff√©rentes activit√©s et identifie les forces, faiblesses et tendances.

R√©ponds au format JSON avec les champs suivants:
{
  "overview": "Vue d'ensemble de la progression",
  "strengths": ["Point fort 1", "Point fort 2"],
  "weaknesses": ["Point faible 1", "Point faible 2"],
  "trends": "Analyse des tendances de progression",
  "recommendations": ["Recommandation 1", "Recommandation 2"],
  "nextSteps": "Prochaines √©tapes sugg√©r√©es"
}
`
};

/**
 * Extrait le contenu JSON d'une r√©ponse markdown
 * @param content Contenu de la r√©ponse
 * @returns Contenu JSON nettoy√©
 */
const extractJsonFromMarkdown = (content: string): string => {
  // Extraire le JSON entre les balises ```json si pr√©sentes
  const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
  let jsonContent = jsonMatch ? jsonMatch[1] : content;
 
  // Nettoyer le contenu avant le parsing
  jsonContent = jsonContent.trim();
 
  // Si le JSON est tronqu√©, essayons de le r√©parer
  try {
    JSON.parse(jsonContent);
    return jsonContent;
  } catch (e) {
    console.log('JSON tronqu√©, tentative de r√©paration...');
   
    // Compter les accolades/crochets ouvrants et fermants
    const openBraces = (jsonContent.match(/{/g) || []).length;
    const closeBraces = (jsonContent.match(/}/g) || []).length;
    const openBrackets = (jsonContent.match(/\[/g) || []).length;
    const closeBrackets = (jsonContent.match(/]/g) || []).length;
   
    // V√©rifier si le JSON est tronqu√© au milieu d'une propri√©t√©
    const lastChar = jsonContent.trim().slice(-1);
    if (lastChar === '"' || lastChar === ':' || lastChar === ',') {
      // Supprimer la derni√®re ligne incompl√®te
      jsonContent = jsonContent.replace(/,[^\]}]*$/, '');
    }
   
    // Ajouter les accolades/crochets manquants
    while (closeBrackets < openBrackets) {
      jsonContent += ']';
    }
    while (closeBraces < openBraces) {
      jsonContent += '}';
    }
   
    // V√©rifier si le JSON est maintenant valide
    try {
      JSON.parse(jsonContent);
      console.log('JSON r√©par√© avec succ√®s');
      return jsonContent;
    } catch (e) {
      console.error('Impossible de r√©parer le JSON:', e);
      throw new Error('Format JSON invalide apr√®s tentative de r√©paration');
    }
  }
};

/**
 * Interagit avec l'IA Fabrile pour diff√©rents types d'√©valuations et feedbacks
 * @param organizationId ID de l'organisation
 * @param content Contenu √† √©valuer ou analyser
 * @param type Type d'interaction avec l'IA
 * @param botId ID sp√©cifique du bot √† utiliser (optionnel)
 * @returns R√©ponse format√©e de l'IA
 */
export async function interactWithAI(
  organizationId: string,
  content: string,
  type: AIInteractionType,
  botId?: string
) {
  try {
    // 1. R√©cup√©rer l'ID de l'agent depuis les variables d'environnement ou utiliser l'ID sp√©cifique fourni
    let agentId = botId;
    
    // Si aucun ID sp√©cifique n'est fourni, v√©rifier le type d'interaction
    if (!agentId) {
      // V√©rifier si c'est un type qui utilise un algorithme local au lieu d'un bot
      if (type === 'concept_identification') {
        // Pour l'identification, on utilise un algorithme local, pas besoin d'ID de bot
        // On utilise un ID fictif pour √©viter l'erreur
        agentId = 'algorithme_local';
        console.log('Utilisation de l\'algorithme local pour l\'identification des concepts');
      } else {
        // Table de correspondance des IDs de bots par type d'interaction
        const botIds: Record<string, string> = {
          'concept_restitution': import.meta.env.VITE_Restitution_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb',
          'quiz_evaluation': import.meta.env.VITE_Quiz_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb',
          'note_feedback': import.meta.env.VITE_Note_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb',
          'mindmap_feedback': import.meta.env.VITE_Mindmap_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb',
          'study_planning': import.meta.env.VITE_Planning_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb',
          'progress_report': import.meta.env.VITE_Progress_BOT_ID || 'bot_CHnxzWJ59zu6W2gH7E9gb'
        };
        
        // R√©cup√©rer l'ID du bot pour ce type d'interaction
        agentId = botIds[type];
        
        if (agentId) {
          console.log(`Utilisation du bot sp√©cifique pour ${type}:`, agentId);
        }
      }
    }
   
    if (!agentId) {
      console.error(`Aucun ID de bot trouv√© pour le type d'interaction: ${type}`);
      throw new Error(`ID de bot Fabrile manquant pour le type d'interaction: ${type}`);
    }
    
    console.log(`Interaction avec le bot ID: ${agentId.substring(0, 5)}... (masqu√© pour s√©curit√©)`);
   
    // 2. Pr√©parer le prompt avec le contenu √† √©valuer
    const promptBase = AI_PROMPTS[type] || 'Veuillez analyser ce contenu:';
    const prompt = `${promptBase}\n\n${content}`;
   
    console.log(`Interaction IA de type: ${type}`);
   
    // 3. Cr√©er un thread de conversation
    const threadResponse = await createThread(organizationId, agentId);
    const threadId = threadResponse.id;
   
    console.log(`Thread cr√©√© avec succ√®s, ID: ${threadId}`);
   
    // 4. Envoyer le message au thread
    const result = await createThreadMessage(organizationId, threadId, prompt);
   
    console.log('R√©ponse re√ßue de l\'IA');
   
    // 5. Traiter la r√©ponse
    try {
      // Extraire le JSON de la r√©ponse
      const jsonContent = extractJsonFromMarkdown(result.completion.content);
      const jsonResponse = JSON.parse(jsonContent);
     
      console.log('R√©ponse pars√©e avec succ√®s');
     
      // 6. Validation et transformation selon le type d'interaction
      switch (type) {
        case 'concept_identification':
          // Validation pour l'identification de concepts
          if (typeof jsonResponse.isCorrect !== 'boolean' || 
              typeof jsonResponse.similarity !== 'number' ||
              typeof jsonResponse.feedback !== 'string') {
            throw new Error('R√©ponse incompl√®te pour l\'identification de concept');
          }
          break;
          
        case 'concept_restitution':
          // Validation pour la restitution de concepts
          if (!jsonResponse.concept || !jsonResponse.champs || 
              typeof jsonResponse.note_globale_sur_30 !== 'number' || 
              typeof jsonResponse.est_validee !== 'boolean' ||
              typeof jsonResponse.commentaire_general !== 'string') {
            throw new Error('R√©ponse incompl√®te pour la restitution de concept');
          }
          break;
          
        case 'quiz_evaluation':
          // Validation pour l'√©valuation de quiz
          if (typeof jsonResponse.score !== 'number' || 
              typeof jsonResponse.feedback !== 'string' ||
              !Array.isArray(jsonResponse.questionResults)) {
            throw new Error('R√©ponse incompl√®te pour l\'√©valuation de quiz');
          }
          break;
          
        case 'note_feedback':
        case 'mindmap_feedback':
          // Validation pour les feedbacks sans notation
          if (typeof jsonResponse.feedback !== 'string' ||
              !Array.isArray(jsonResponse.strengths) ||
              !Array.isArray(jsonResponse.improvements)) {
            throw new Error('R√©ponse incompl√®te pour le feedback');
          }
          break;
          
        case 'study_planning':
        case 'progress_report':
          // Validation minimale pour les recommandations
          if (!jsonResponse) {
            throw new Error('R√©ponse vide pour les recommandations');
          }
          break;
      }
     
      return jsonResponse;
    } catch (error) {
      console.error('Erreur lors du parsing de la r√©ponse:', error);
      console.error('Contenu de la r√©ponse:', result.completion.content);
     
      // R√©ponse par d√©faut en cas d'erreur selon le type d'interaction
      switch (type) {
        case 'concept_identification':
          return {
            isCorrect: false,
            similarity: 0,
            feedback: "Une erreur est survenue lors de l'√©valuation. Veuillez r√©essayer."
          };
          
        case 'concept_restitution':
          return {
            concept: "Erreur d'√©valuation",
            champs: {},
            note_globale_sur_30: 0,
            est_validee: false,
            commentaire_general: "Une erreur est survenue lors de l'√©valuation. Veuillez r√©essayer."
          };
          
        case 'quiz_evaluation':
          return {
            score: 0,
            feedback: "Une erreur est survenue lors de l'√©valuation. Veuillez r√©essayer.",
            questionResults: [],
            totalScore: 0,
            maxPossibleScore: 0
          };
          
        case 'note_feedback':
        case 'mindmap_feedback':
          return {
            feedback: "Une erreur est survenue lors de l'analyse. Veuillez r√©essayer.",
            strengths: [],
            improvements: []
          };
          
        default:
          return {
            error: true,
            message: "Une erreur est survenue lors du traitement. Veuillez r√©essayer."
          };
      }
    }
  } catch (error) {
    console.error('Erreur dans interactWithAI:', error);
    throw error;
  }
}

// Pour la compatibilit√© avec le code existant
export async function evaluateExercise(
  organizationId: string,
  content: string,
  type: AIInteractionType
) {
  return interactWithAI(organizationId, content, type);
}
